//file:noinspection DependencyNotationArgument
// TODO remove when fixed in RFG ^


import org.jetbrains.gradle.ext.Gradle

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version "$idea_ext_version"
    id 'com.gtnewhorizons.retrofuturagradle' version "$rfg_version"
}

version = "${project.mc_version}-${project.phase}-${project.major}.${project.minor}.${project.patch}"
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(JvmVendorSpec.AZUL)
        languageVersion.set(JavaLanguageVersion.of(project.java_version))
    }

    // Generate sources and javadoc when building and publishing
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = project.mc_version
    def args = [
            "-ea:${project.group}",
            //"-Dfml.coreMods.load=${coremod_plugin_class_name}"
    ]
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    injectedTags.put('VERSION', project.version)
}

// Generate the InternalTags class with the version number as a field
tasks.injectTags.configure {
    outputClassName.set("${project.group}.MBTInternalTags")
}

repositories {
    maven {
        // MixinBooter
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        // JEI
        name 'Progwml6 Maven'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        // CraftTweaker and JEI Backup
        name 'BlameJared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        // TOP, CTM, GRS, AE2
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        // Mixin
        name 'Sponge Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    // Hard Dependencies
    // the CCL deobf jar uses very old MCP mappings, making it error at runtime in runClient/runServer
    // therefore we manually deobf the regular jar
    implementation rfg.deobf("curse.maven:codechicken-lib-1-8-${ccl_pid}:${ccl_fid}")
    // manually deobf the jar to prevent extra configuration for handling obf/deobf separation
    implementation rfg.deobf("curse.maven:gregtech-ce-unofficial-${gt_pid}:${gt_fid}-sources-${gt_sources_fid}")


    // Soft Dependencies
    implementation "mezz.jei:jei_1.12.2:${project.jei_version}"
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${project.crt_version}"
    implementation rfg.deobf("curse.maven:top-${top_pid}:${top_fid}")
    implementation rfg.deobf("curse.maven:ctm-${ctm_pid}:${ctm_fid}")

    // use a local jar for GroovyScript to avoid a bug from Mixin and ForgeGradle,
    // causing crashes at run-time when deobfuscated
    implementation files("libs/groovyscript-0.4.0.jar")
    compileOnly rfg.deobf("curse.maven:ae2-extended-life-${ae2_pid}:${ae2_fid}")


    // Compile-Time Dependencies

    // GroovyScript dependency
    implementation "zone.rong:mixinbooter:${mixinbooter_version}"

    // Mixin dependencies
    api("org.spongepowered:mixin:${mixin_version}") {
        transitive = false
    }
    annotationProcessor("org.spongepowered:mixin:${mixin_version}") {
        transitive = false
    }

    compileOnly "org.jetbrains:annotations:23.0.0"
    annotationProcessor "org.jetbrains:annotations:23.0.0"

    annotationProcessor "org.ow2.asm:asm-debug-all:${asm_debug_version}"
    annotationProcessor "com.google.guava:guava:${guava_version}-jre"
    annotationProcessor "com.google.code.gson:gson:${gson_version}"
}

//noinspection ConfigurationAvoidance
for (File at : sourceSets.getByName('main').resources.files) {
    if (at.name.toLowerCase().endsWith('_at.cfg')) {
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from at
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from at
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // replace version and mcversion
        fcd.expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1' // Access Transformers
}

jar {
    manifest {
        def attribute_map = [:]
        //attribute_map['FMLCorePlugin'] = coremod_plugin_class_name
        //attribute_map['FMLCorePluginContainsFMLMod'] = true
        //attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
        attribute_map['FMLAT'] = archives_base_name + '_at.cfg'
        attributes(attribute_map)
    }

    // Add all embedded dependencies into the jar
    from provider {
        configurations.embed.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

idea {
    module {
        inheritOutputDirs true
        downloadJavadoc true
        downloadSources true
    }
    project {
        settings {
            runConfigurations {
                '1. Run Client'(Gradle) {
                    taskNames = ['runClient']
                }
                '2. Run Server'(Gradle) {
                    taskNames = ['runServer']
                }
                '3. Run Obfuscated Client'(Gradle) {
                    taskNames = ['runObfClient']
                }
                '4. Run Obfuscated Server'(Gradle) {
                    taskNames = ['runObfServer']
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = '-encoding utf8'
                    moduleJavacAdditionalOptions = [
                            (project.name + '.main'): tasks.compileJava.options.compilerArgs.collect {
                                '"' + it + '"'
                            }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named('processIdeaSettings').configure {
    dependsOn('injectTags')
}

tasks.register("copyExamples") {
    doLast {
        Path scriptsDir = Paths.get("${projectDir}/run/scripts")
        Path examplesDir = Paths.get("$projectDir/examples")

        file(scriptsDir).deleteDir()
        mkdir(scriptsDir)

        Files.walk(examplesDir).forEach {
            exampleFile ->
                Path targetPath = scriptsDir.resolve(examplesDir.relativize(exampleFile))
                Files.copy(exampleFile, targetPath, StandardCopyOption.REPLACE_EXISTING)
        }
    }
}
tasks.named("runClient").configure {
    dependsOn("copyExamples")
}

//val javadoc: Javadoc by tasks
// TODO, fix Javadoc stuff
tasks.named("javadoc", Javadoc).configure {
    /*javadoc.exclude { el ->
        el.file.isFile &&
                (el.file.name != "package-info.java" &&
                        el.file.useLines { lines -> !lines.contains("@ZenRegister") })
    } */

    javadoc.setDestinationDir(file("docs/gtceu"))

    javadoc.options {
        /*exclude {
            javadoc.f
        } */
        locale("en")
        setDestinationDirectory(file("docs/gtceu"))
        //javadoc.ta
    }
}

/*javadoc.apply {
    exclude { el ->
        el.file.isFile &&
                (el.file.name != "package-info.java" &&
                        el.file.useLines { lines -> !lines.contains("@ZenRegister") })
    }
    setDestinationDir(file("docs/gtceu"))
    (options as StandardJavadocDocletOptions).run {
        locale("en")
        tags!!.addAll(listOf(
                "zenClass:a:ZenClass:",
                "zenGetter:a:ZenGetter:",
                "zenSetter:a:ZenSetter:"
        ))
    }
} */


